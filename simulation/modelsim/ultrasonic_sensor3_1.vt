// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "03/02/2023 09:59:36"
                                                                                
// Verilog Test Bench template for design : ultrasonic_sensor3_1
// 
// Simulation tool : ModelSim (Verilog)
// 

`timescale 1 ns/ 1 ns
module ultrasonic_sensor3_1_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg ct1;
reg gclk;
reg miso;
reg out_3;
reg out_4;
reg rstn;
// wires                                               
wire ct;
wire io1;
wire io2;
wire mosi;
wire nss;
wire sclk;

// assign statements (if any)                          
ultrasonic_sensor3_1 i1 (
// port map - connection between master ports and signals/registers   
	.ct(ct),
	.ct1(ct1),
	.gclk(gclk),
	.io1(io1),
	.io2(io2),
	.miso(miso),
	.mosi(mosi),
	.nss(nss),
	.out_3(out_3),
	.out_4(out_4),
	.rstn(rstn),
	.sclk(sclk)
);




initial begin
rstn='b0;#60;                                                 
rstn='b1;          
miso='b0;#600;  
miso='b1;  
 
end





initial                                                
begin 
out_3='b1;
out_4='b1;
$display("Running testbench");                       
end            


//gclk=24Mhz                                        
always begin
	gclk='b0;#(1000/48);
	gclk='b1;#(1000/48);  	
end  




initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
                                                       
// --> end                                             
$display("Running testbench");                       
end                                                    
always                                                 
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin                          
                                                       
@eachvec;                                              
// --> end                                             
end                                                    
endmodule

